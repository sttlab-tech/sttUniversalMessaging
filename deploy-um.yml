# To create the wm-regcred container registry secret:
# kubectl create secret docker-registry wm-regcred --docker-server=${WM_CR_SERVER} --docker-username=${WM_CR_USERNAME} --docker-password=${WM_CR_PASSWORD}

apiVersion: v1
kind: ServiceAccount
metadata:
  name: umserver-sa
  labels:
    app.kubernetes.io/name: universalmessaging
    app.kubernetes.io/instance: umserver
    app.kubernetes.io/version: "11.1"
---
apiVersion: v1
kind: Service
metadata:
  name: umserver-0
  labels:
    app.kubernetes.io/name: universalmessaging
    app.kubernetes.io/instance: umserver
    app.kubernetes.io/version: "11.1"
spec:
  selector:
    statefulset.kubernetes.io/pod-name: umserver-0
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
      name: nsp
    - port: 80
      targetPort: 9001
      protocol: TCP
      name: http
    - port: 9200
      targetPort: 9200
      protocol: TCP
      name: metrics
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: umserver
  labels:
    app.kubernetes.io/name: universalmessaging
    app.kubernetes.io/instance: umserver
    app.kubernetes.io/version: "11.1"
spec:
  replicas: 1
  serviceName: umserver
  selector:
    matchLabels:
      app.kubernetes.io/name: universalmessaging
      app.kubernetes.io/instance: umserver
  template:
    metadata:
      labels:
        app.kubernetes.io/name: universalmessaging
        app.kubernetes.io/instance: umserver
    spec:
      imagePullSecrets:
        - name: wm-regcred
      serviceAccountName: umserver-sa      
      containers:
        - name: umserver   
          image: "ibmwebmethods.azurecr.io/universalmessaging-server:11.1"
          imagePullPolicy: Always
          ports:
            - name: nsp
              containerPort: 9000
              protocol: TCP
            - name: http
              containerPort: 9001
              protocol: TCP
            - name: metrics
              containerPort: 9200
              protocol: TCP              
          volumeMounts:
          - name: data
            mountPath: /opt/softwareag/UniversalMessaging/server/umserver/data
          - name: logs
            mountPath: /opt/softwareag/UniversalMessaging/server/umserver/logs
          - name: configuration
            mountPath: /opt/softwareag/common/conf    
          env:
          - name: REALM_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: INIT_JAVA_MEM_SIZE
            value: "1024"
          - name: MAX_JAVA_MEM_SIZE
            value: "1024"
          - name: MAX_DIRECT_MEM_SIZE
            value: "1G"
          - name: BASIC_AUTH_ENABLE
            value: "No"
          - name: BASIC_AUTH_MANDATORY
            value: "No"
          - name: STARTUP_COMMAND
            value: ""
          - name: LOG_FRAMEWORK
            value: ""          
          startupProbe:
            failureThreshold: 30
            httpGet:
              path: /health/
              port: 9000
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health/
              port: 9000
            initialDelaySeconds: 0
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 30
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health/
              port: 9000
            initialDelaySeconds: 0
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 30
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: logs
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: configuration
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi